using System;
using System.Collections.Generic;
using System.Text;
using System.Net.Sockets;
using System.Net;
namespace SharkScan.SMB
{

    class SmbDataObj
    {
        public string _ComputerOs = "";
        public string _ComputerName = "";
        public string _DomainName = "";
        public string _DNSComputerName = "";
        public string _DNSDomainName = "";
        public string _DNSTreeName = "";
        public List<string> _ComputerNets = new List<string>{};
    }
    class Smb
    {
        static public string doData(string dataString)
        {
            Byte[] OSbytes = Encoding.ASCII.GetBytes(dataString);
            List<char> chars = new List<char>();
            foreach (var b in OSbytes)
            {
                if (0 != b)
                    chars.Add((char)b);
            }
            string result = new string(chars.ToArray());
            return result;
        }

        static public SmbDataObj Run(string Ip,int Port = 445,int TimeOut=1000)
        {
            SmbDataObj SmbData = new SmbDataObj();
            Dictionary<string, string> smbData = new Dictionary<string, string>();
            try
            {
                TcpClient client = new TcpClient();
                IAsyncResult oAsyncResult = client.BeginConnect(Ip, Port, null, null);
                oAsyncResult.AsyncWaitHandle.WaitOne(TimeOut, true);
                if (!client.Connected)
                {
                    return SmbData;
                }
                Byte[] payload1 = new byte[] { 0x00, 0x00, 0x00, 0x85, 0xff, 0x53, 0x4d, 0x42, 0x72, 0x00, 0x00, 0x00, 0x00, 0x18, 0x53, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x02, 0x50, 0x43, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x20, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x20, 0x31, 0x2e, 0x30, 0x00, 0x02, 0x4c, 0x41, 0x4e, 0x4d, 0x41, 0x4e, 0x31, 0x2e, 0x30, 0x00, 0x02, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x57, 0x6f, 0x72, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x33, 0x2e, 0x31, 0x61, 0x00, 0x02, 0x4c, 0x4d, 0x31, 0x2e, 0x32, 0x58, 0x30, 0x30, 0x32, 0x00, 0x02, 0x4c, 0x41, 0x4e, 0x4d, 0x41, 0x4e, 0x32, 0x2e, 0x31, 0x00, 0x02, 0x4e, 0x54, 0x20, 0x4c, 0x4d, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x00 };
                Byte[] payload2 = new byte[] { 0x00, 0x00, 0x01, 0x0a, 0xff, 0x53, 0x4d, 0x42, 0x73, 0x00, 0x00, 0x00, 0x00, 0x18, 0x07, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x40, 0x00, 0x0c, 0xff, 0x00, 0x0a, 0x01, 0x04, 0x41, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0xa0, 0xcf, 0x00, 0x60, 0x48, 0x06, 0x06, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x02, 0xa0, 0x3e, 0x30, 0x3c, 0xa0, 0x0e, 0x30, 0x0c, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x02, 0x02, 0x0a, 0xa2, 0x2a, 0x04, 0x28, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x82, 0x08, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x02, 0xce, 0x0e, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x20, 0x00, 0x53, 0x00, 0x65, 0x00, 0x72, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x30, 0x00, 0x33, 0x00, 0x20, 0x00, 0x33, 0x00, 0x37, 0x00, 0x39, 0x00, 0x30, 0x00, 0x20, 0x00, 0x53, 0x00, 0x65, 0x00, 0x72, 0x00, 0x76, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6b, 0x00, 0x20, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x20, 0x00, 0x53, 0x00, 0x65, 0x00, 0x72, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x30, 0x00, 0x33, 0x00, 0x20, 0x00, 0x35, 0x00, 0x2e, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00 };
             
                NetworkStream stream = client.GetStream();
                stream.ReadTimeout = TimeOut;
           
                stream.Write(payload1, 0, payload1.Length);
                String responseData = String.Empty;
                Byte[] data = new Byte[1024];
            
                Int32 bytes = stream.Read(data, 0, data.Length);
                responseData = Encoding.ASCII.GetString(data, 0, bytes);
                stream.Write(payload2, 0, payload2.Length);
                responseData = String.Empty;
                data = new Byte[1024];
                bytes = stream.Read(data, 0, data.Length);
                responseData = Encoding.ASCII.GetString(data, 0, bytes);
                stream.Close();
                client.Close();

                int start = responseData.IndexOf("NTLMSSP");
                int len = 47 + data[43] + data[44] * 256;
                int offset = data[start + 44];
                int index = start + offset;
                string OStemp = Encoding.ASCII.GetString(data, len, 1024 - len - 1);
                
                string ComputerOs = doData(OStemp);

                string[] arraryStr = ComputerOs.Split(new string[1] { "Windows" }, StringSplitOptions.RemoveEmptyEntries);
               

                if (arraryStr.Length >= 2)
                {
                    ComputerOs = "Windows " + arraryStr[1];
                }
                SmbData._ComputerOs = ComputerOs;
                int length = data[start + 40] + data[start + 41] * 256;
                while (index < (start + offset + length))
                {
                    int item_type = data[index] + data[index + 1];
                    int item_length = data[index + 2] + data[index + 3] * 256;
                    string item_content = Encoding.ASCII.GetString(data, index + 4, item_length);
                    string rescont = doData(item_content);
                    if ((data[index] == 0x01) && (data[index + 1] == 0x00))
                    {
                        SmbData._ComputerName = rescont;
                    }
                    else if ((data[index] == 0x02) && (data[index + 1] == 0x00))
                    {
                        SmbData._DomainName = rescont;
                    }
                    else if ((data[index] == 0x03) && (data[index + 1] == 0x00))
                    {
                        SmbData._DNSComputerName = rescont;
                    }
                    else if ((data[index] == 0x04) && (data[index + 1] == 0x00))
                    {
                        SmbData._DNSDomainName = rescont;
                    }
                    else if ((data[index] == 0x05) && (data[index + 1] == 0x00))
                    {
                        SmbData._DNSTreeName = rescont;
                    }
                    index += 4 + item_length;
                }
                NBTNameService NBT = new NBTNameService();
                SmbData._ComputerNets = NBT.lookup(IPAddress.Parse(Ip), SmbData._ComputerName);
            }
            catch (System.Net.Sockets.SocketException)
            {
                Debug.Write(1, "SMB SocketException");
               
                return SmbData;
            }
            catch (System.IO.IOException)
            {
                Debug.Write(1, "SMB IOException");
                return SmbData;
            }
            
            return SmbData;
        }
    }
}
